/*
Ќапишите рекурсивную функцию, котора€ принимает число n типа int и число k Ч максимальную длину прыжка, а возвращает количество способов,
которым кролик может доскакать до n - й ступеньки.≈сли максимальна€ длина прыжка не задана Ч считать еЄ равной трЄм.

ѕример:
¬вод: 3, 2
¬ывод : 3

ѕо€снение : (1, 2), (2, 1), (1, 1, 1)
„ек - лист дл€ проверки задачи

‘ункци€ принимает корректные типы данных, тип возвращаемого значени€ Ч  int.
‘ункци€ не использует библиотек кроме <iostream>.
‘ункци€ рекурсивна€.
‘ункци€ содержит значение по умолчанию.
*/

/*
ѕусть fi Ц количество вариантов на лестнице с i ступеньками.
ќчевидно, что f0 = f1 = 1.
ѕусть k Ц это максимальный прыжок.
≈сли первый прыжок равен 1, то на оставшихс€ ступеньках количество вариантов равно f(i - 1),
если 2, то f(i - 2),
если k, то f(i - k),
т.е. получаем рекуррентную формулу
f(i) = f(i - 1) + f(i - 2) + Е + f(i - k).********************(1)
≈сли примен€ть ее непосредственно, то многократно будут вычисл€тьс€ перекрещивающиес€ подзадачи, поэтому надо применить динамическое программирование,
т.е. вычислить их один раз и сложить в вектор.
¬ нем два первых элемента единицы, а каждый следующий равен сумме предыдущих k, или всех предыдущих, если их меньше k.
»з формулы (1) имеем
f(i + 1) = f(i) + f(i - 1) + Е + f(i Ц k + 1)****************(2)
т.е.
f(i + 1) = f(i) + f(i - 1) + Е + f(i Ц (k - 1))***************(3)
откуда, согласно (1), получим:
f(i + 1) = f(i) + f(i) Ц f(i Ц k)
т.е.
f(i + 1) = 2 * f(i) Ц f(i Ц k)
или
f(i) = 2 * f(i - 1) Ц f(i Ц k - 1).
–азумеетс€, второй член вычитаем, если его индекс неотрицательный.
ѕо этой формуле заполн€ем вектор, пока не дойдем до нужного нам индекса, равного заданной длине N лестницы. «начение по этому индексу и будет ответом дл€ заданных N и k.
*/

#include <iostream>
using namespace std;

int cals(int stair, int jump = 3)
{
	if (stair == 0 || stair == 1)
		return 1;
	if (stair - jump - 1 < 0)
		return 2 * cals(stair - 1);
	if (stair - jump - 1 >= 0)
		return 2 * cals(stair - 1) - cals(stair - jump - 1);
}

int main()
{
	cout << "input stair number and max jump: ";
	int nStair = 0, nJump = 0;
	cin >> nStair >> nJump;
	if (nJump > 0)
		cout << "answer: " << cals(nStair, nJump);
	else
		cout << "answer: " << cals(nStair);
}